{
  "anonymous-function": {
    "body": [
      "function($1)",
      "\t${0}",
      "end"
    ],
    "description": "Create an anonymous function",
    "prefix": "f)"
  },
  "assigment": {
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "Define a variable",
    "prefix": "ll"
  },
  "assign-function": {
    "body": [
      "${1:name} = function($2)",
      "\t${0}",
      "end"
    ],
    "description": "Assign a function to a variable",
    "prefix": "f="
  },
  "class": {
    "body": [
      "${1:M} = {}\n",
      "$1.${2:new} = function($3)",
      "\t${6}",
      "end"
    ],
    "description": "Create a class",
    "prefix": "cl"
  },
  "elseif": {
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ],
    "prefix": "elseif"
  },
  "for": {
    "body": [
      "for $1 do",
      "\t$0",
      "end"
    ],
    "description": "for statement",
    "prefix": "for"
  },
  "for-ipairs": {
    "body": [
      "for ${1:i}, ${2:x} in ipairs(${3:t}) do",
      "\t$0",
      "end"
    ],
    "description": "for i, x in ipairs(t)",
    "prefix": "fori"
  },
  "for-numeric": {
    "body": [
      "for ${1:i} = ${2:1}, ${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "for numeric range statement",
    "prefix": "forn"
  },
  "for-pairs": {
    "body": [
      "for ${1:k}, ${2:v} in pairs(${3:t}) do",
      "\t$0",
      "end"
    ],
    "description": "for k, v in pairs(t)",
    "prefix": "forp"
  },
  "forline": {
    "body": [
      "local f = io.open(${1:${2:filename}}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0}",
      "end"
    ],
    "description": "Read file line by line",
    "prefix": "forline"
  },
  "function": {
    "body": [
      "function ${1:name}($2)",
      "\t${0}",
      "end"
    ],
    "description": "Define a function",
    "prefix": "fu"
  },
  "if": {
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ],
    "prefix": "if"
  },
  "local": {
    "body": [
      "local ${0}"
    ],
    "description": "Declare a variable",
    "prefix": "l"
  },
  "local-assign-function": {
    "body": [
      "local ${1:name} = function($2)",
      "\t${0}",
      "end"
    ],
    "description": "Assign a function to a local variable",
    "prefix": "lf="
  },
  "local-function": {
    "body": [
      "local function ${1:name}($2)",
      "\t${0}",
      "end"
    ],
    "description": "Define a local function",
    "prefix": "lfu"
  },
  "locpcall": {
    "body": [
      "local ${1:status}, ${2:err_or_value} = pcall(${3:function})"
    ],
    "description": "Protect call a function as a variable",
    "prefix": "lpca"
  },
  "locreq": {
    "body": [
      "local ${1:module} = require(\"${2:$1}\")$0"
    ],
    "description": "Require module as a variable",
    "prefix": "lreq"
  },
  "member-function": {
    "body": [
      "${1:name} = function($2)",
      "\t${0}",
      "end,"
    ],
    "description": "Assign a function to a table key",
    "prefix": "f,"
  },
  "pcall": {
    "body": [
      "pcall(${1:function})"
    ],
    "description": "Protect call a function",
    "prefix": "pca"
  },
  "print": {
    "body": [
      "print(${0})"
    ],
    "prefix": "p"
  },
  "require": {
    "body": [
      "require(${1:module})"
    ],
    "description": "Require module",
    "prefix": "req"
  },
  "return": {
    "body": [
      "return $0"
    ],
    "description": "Return value",
    "prefix": "rt"
  },
  "self": {
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ],
    "prefix": "self:"
  },
  "stylua-ignore-line": {
    "body": "-- stylua: ignore",
    "prefix": "stylua-ignore-line"
  },
  "stylua_ignore": {
    "body": [
      "-- stylua: ignore start",
      "$TM_SELECTED_TEXT",
      "-- stylua: ignore end"
    ],
    "prefix": "stylua-ignore-block"
  },
  "while": {
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ],
    "prefix": "while"
  }
}
