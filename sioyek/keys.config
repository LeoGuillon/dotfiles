# DOCS https://sioyek-documentation.readthedocs.io/
# ──────────────────────────────────────────────────────────────────────────────


# ──────────────────────────────────────────────────────────────────────────────
# INTER-FILE NAVIGATION
# [o]pen…

open_prev_doc o
open_document O
open_document_embedded <C-o>
open_document_embedded_from_current_path <C-S-o>

# Opens the last document opened is sioyek. It is useful when you want to quickly toggle between two documents
# mapped to `h` as “hop…” or “harpoon”, similar to my neovim and zsh mapping
open_last_document h


# ────────────────────────────────────────────────────────────────────────────────
# INTRA-FILE NAVIGATION

goto_beginning gg # If prefixed with a number, it will go to that page.
goto_end G
goto_page_with_page_number gp

goto_left_smart <A-q> # ^
goto_right_smart <A-p> # $

goto_top_of_page;goto_right_smart zz

move_down <down>
move_up <up>
move_left <right>
move_right <left>


# Go down one screen width (can be prefixed with a number which tells how many screen widths should we go down)
screen_down <space>
screen_up <S-<space>>
screen_down d
screen_up u

next_page <C-f>
previous_page <C-b>

# TODO: setup proper commands to navigate through chapters
# # Goto the next/prev chapter
# next_chapter <A--><A-->
# prev_chapter <A-x><A-x>

# history points
prev_state <backspace>
next_state <S-<backspace>>

# new_window <C-t>
close_window <C-c>

# Open table of contents ([s]ommaire)
goto_toc s

# ──────────────────────────────────────────────────────────────────────────────
# SYNCTEX
# TODO: setup synctex 

# # Toggle synctex mode. When in synctex mode, right clicking on a pdf launches the corresponding latex page.
# toggle_synctex <f4>
#synctex_under_cursor <unbound>

# ────────────────────────────────────────────────────────────────────────────────
# VIEWING

# Zoom
zoom_in <A-r> # +
zoom_out <A-t> # -

# Rotate document
rotate_clockwise r
rotate_counterclockwise R

# fit (=[a]juste)
fit_to_page_width al # width = [l]argeur in french
fit_to_page_width_smart aL
fit_to_page_height ah
fit_to_page_height_smart aH


# ────────────────────────────────────────────────────────────────────────────────
# SEARCH

search <A-i> # /
chapter_search c<A-i> # c/
next_item n
previous_item N

# Search the selected text using one of the search engines defined using search_url_* settings in prefs.config (* can be any letter between 'a' and 'z')
# see https://sioyek-documentation.readthedocs.io/en/latest/usage.html#external-search
# TODO: setup external search
# external_search s


# ──────────────────────────────────────────────────────────────────────────────
# BOOKMARKS

add_bookmark b
delete_bookmark db

goto_bookmark gb # bookmarks of current document
goto_bookmark_g gB # bookmarks of ALL documents

# ---------- HIGHLIGHTS ----------
# TODO: setup highlights ? not sure tbh

# You can select a piece of text and press the `add_highlight` shortcut followed by a symbol (a character from a-z) to highlight
# the text
# add_highlight h
# Goto highlights of current document
# goto_highlight gh
# Goto highlights of all documents
# goto_highlight_g gH
# Left click on a highlight and then press the `delete_highlight` shortcut to delete it.
# delete_highlight dh

# Sets the highlight type to be used for other operations (the default highlight type is 'a')
#set_select_highlight_type

## Same as `add_highlight` but uses the current selected highlight type as the type of highlight
#add_highlight_with_current_type <unbound>

## Toggle select highlight mode. In select highlight mode, all text selected using mouse will automatically be highlighted
## with highlight type set using `set_select_highlight_type`
#toggle_select_highlight <unbound>

# Goto next/previous highlight in current document
# goto_next_highlight gnh
# goto_prev_highlight gNh

## Goto next/previous highlight of the current selected highlight type
#goto_next_highlight_of_type <unbound>
#goto_prev_highlight_of_type <unbound>

# ──────────────────────────────────────────────────────────────────────────────
# MARKS

set_mark m
goto_mark <A-y> # `

# ---------- PORTALS ----------
# TODO: setup portals

# # If we are in default state, goto portal state with the current location in document as the portal source
# # if we are already in the portal state, create the portal with the current location as destination.
# portal p
#
# # Delete the portal with the closest source to current location
# delete_portal dp
#
# # Goto the position of the portal with the closest source to current location
# goto_portal gp
# goto_portal <tab>
#
# # Similar to goto_portal, except when prev_state is called, the destination of the portal is update to be the state
# # on which prev_state is called
# edit_portal P
# edit_portal <S-<tab>>
#
# # Open/Close the helper window for portals
# toggle_window_configuration <f12>

## open/close helper window
#toggle_one_window <unbound>

# ────────────────────────────────────────────────────────────────────────────────
# DISPLAY TOGGLES

# [t]oggle…

toggle_custom_color tc
toggle_dark_mode td
toggle_fullscreen tf
toggle_highlight th # highlight the links in pdfs or not
toggle_presentation_mode tp # In presentation mode, we fit the pages to screen and movement keys move entire pages
toggle_statusbar ts
toggle_titlebar tt


# ──────────────────────────────────────────────────────────────────────────────
# MISC


quit q

# Open PDF links using keyboard
open_link f # similar to vimium
# open command line
command :

# ──────────────────────────────────────────────────────────────────────────────
# CUSTOM COMMANDS

## You can bind custom commands defined in `prefs_user.config` using the same syntax as the built-in commands
## --------prefs_user.config-----------
## new_command	_my_command_name python /path/to/script.py %{file_name} %{paper_name}
## ------------------------------------
## now you can bind _my_command_name to a keybind here:
#_my_command_name <unbound>
